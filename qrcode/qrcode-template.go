// Code generated by go-bindata.
// sources:
// public/views/otp.html
// DO NOT EDIT!

package qrcode

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _publicViewsOtpHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x52\xc1\x6e\xdb\x30\x0c\xbd\xfb\x2b\x38\x5d\x7a\x99\xac\x62\x1d\x8a\xa1\x95\x03\x0c\xbb\x0e\xd8\x80\xee\x07\x14\x89\x8e\x89\x49\xb2\x23\xd1\x69\x02\xc3\xff\x3e\xc8\x36\xd6\x20\xd1\x45\x7c\x24\xc5\xf7\xf4\xc0\x69\x72\xd8\x52\x44\x10\xc7\x64\x7b\x87\x62\x9e\x2b\xfd\x49\x4a\x18\xc6\xbd\x27\xab\x28\x3a\x3c\xd7\x1d\x07\x0f\x52\xee\xaa\x4a\x97\x70\xb9\xd1\xb8\x5d\x05\x00\xa0\x03\xb2\x81\x8e\x79\x90\x78\x1c\xe9\xd4\x08\xdb\x47\xc6\xc8\x92\x2f\x03\x0a\xd8\x50\x23\x18\xcf\xac\xca\xfb\x57\xb0\x9d\x49\x19\xb9\x19\xb9\x95\xdf\xc4\xae\x5a\x07\x31\xb1\xc7\xdd\xaf\x3f\xbf\xe1\xfb\x30\x68\xb5\xc2\xad\x56\x34\xfd\x34\x8c\x99\xc1\xf6\x61\x20\x8f\x0e\x4c\x74\x10\x28\x52\x4b\xe8\xe0\xc7\xdb\xdb\x22\x71\xe9\xf6\x14\xff\x42\x42\xdf\x88\xcc\x17\x8f\xb9\x43\x64\x01\x5d\xc2\xb6\x11\x45\x69\x7e\x51\x2a\x98\xb3\x75\xb1\xde\xf7\x3d\x67\x4e\x66\x28\xc0\xf6\x41\xfd\x4f\xa8\xa7\xfa\xa9\x7e\x56\x36\xe7\x8f\x5c\x1d\x28\xd6\x36\xe7\xa2\x59\xab\xd5\x84\x4a\xef\x7b\x77\xd9\x98\x1d\x9d\xc0\x7a\x93\xf3\x6a\x83\xa1\x88\x49\xb6\x7e\x24\x27\xd6\x8e\xdb\xae\xd4\xbf\x5f\x55\xee\x67\x78\x19\x5c\xf1\x08\x6e\x4e\x75\x9b\xd0\x14\x0e\xd0\x21\x1d\x3a\x6e\xc4\x97\xc7\x47\x01\xef\xe4\xb8\xdb\xe2\x9c\x6c\xf3\xe0\x0c\x9b\x17\x0a\xe6\x80\x6a\x88\x87\xd7\xbd\xc9\xf8\xfc\xf5\x33\x4c\x53\x3d\xcf\x0f\x60\x3c\x37\xe2\x98\xe4\xb2\x07\xa0\xee\x18\xef\x69\xb5\x72\x74\xba\xfa\xd6\x07\xdc\x42\xad\x56\x6b\x8a\x57\xcb\xe2\x4c\x13\x46\x37\xcf\xff\x02\x00\x00\xff\xff\x5e\x7d\x2f\xdb\x77\x02\x00\x00")

func publicViewsOtpHtmlBytes() ([]byte, error) {
	return bindataRead(
		_publicViewsOtpHtml,
		"public/views/otp.html",
	)
}

func publicViewsOtpHtml() (*asset, error) {
	bytes, err := publicViewsOtpHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "public/views/otp.html", size: 631, mode: os.FileMode(420), modTime: time.Unix(1522799010, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"public/views/otp.html": publicViewsOtpHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"public": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"otp.html": &bintree{publicViewsOtpHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

